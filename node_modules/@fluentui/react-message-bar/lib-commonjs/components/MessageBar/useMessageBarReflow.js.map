{"version":3,"sources":["useMessageBarReflow.ts"],"sourcesContent":["import * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { isHTMLElement } from '@fluentui/react-utilities';\n\nexport function useMessageBarReflow(enabled: boolean = false) {\n  const { targetDocument } = useFluent();\n  const forceUpdate = React.useReducer(() => ({}), {})[1];\n  const reflowingRef = React.useRef(false);\n  // TODO: exclude types from this lint rule: https://github.com/microsoft/fluentui/issues/31286\n  // eslint-disable-next-line no-restricted-globals\n  const resizeObserverRef = React.useRef<ResizeObserver | null>(null);\n  const prevInlineSizeRef = React.useRef(-1);\n\n  const handleResize: ResizeObserverCallback = React.useCallback(\n    entries => {\n      // Resize observer is only owned by this component - one resize observer entry expected\n      // No need to support multiple fragments - one border box entry expected\n      if (process.env.NODE_ENV !== 'production' && entries.length > 1) {\n        // eslint-disable-next-line no-console\n        console.error(\n          [\n            'useMessageBarReflow: Resize observer should only have one entry. ',\n            'If multiple entries are observed, the first entry will be used.',\n            'This is a bug, please report it to the Fluent UI team.',\n          ].join(' '),\n        );\n      }\n\n      const entry = entries[0];\n      const borderBoxSize = entry?.borderBoxSize[0];\n      if (!borderBoxSize || !entry) {\n        return;\n      }\n\n      const { inlineSize } = borderBoxSize;\n      const { target } = entry;\n\n      if (!isHTMLElement(target)) {\n        return;\n      }\n\n      let nextReflowing: boolean | undefined;\n\n      // No easy way to really determine when the single line layout will fit\n      // Just keep try to set single line layout as long as the size is growing\n      // Will cause flickering when size is being adjusted gradually (i.e. drag) - but this should not be a common case\n      if (reflowingRef.current) {\n        if (prevInlineSizeRef.current < inlineSize) {\n          nextReflowing = false;\n        }\n      } else {\n        const scrollWidth = target.scrollWidth;\n        if (inlineSize < scrollWidth) {\n          nextReflowing = true;\n        }\n      }\n\n      prevInlineSizeRef.current = inlineSize;\n      if (typeof nextReflowing !== 'undefined' && reflowingRef.current !== nextReflowing) {\n        reflowingRef.current = nextReflowing;\n        forceUpdate();\n      }\n    },\n    [forceUpdate],\n  );\n\n  const ref = React.useCallback(\n    (el: HTMLElement | null) => {\n      if (!enabled || !el || !targetDocument?.defaultView) {\n        return;\n      }\n\n      resizeObserverRef.current?.disconnect();\n\n      const win = targetDocument.defaultView;\n      const resizeObserver = new win.ResizeObserver(handleResize);\n      resizeObserverRef.current = resizeObserver;\n      resizeObserver.observe(el, { box: 'border-box' });\n    },\n    [targetDocument, handleResize, enabled],\n  );\n\n  React.useEffect(() => {\n    return () => {\n      resizeObserverRef.current?.disconnect();\n    };\n  }, []);\n\n  return { ref, reflowing: reflowingRef.current };\n}\n"],"names":["useMessageBarReflow","enabled","targetDocument","useFluent","forceUpdate","React","useReducer","reflowingRef","useRef","resizeObserverRef","prevInlineSizeRef","handleResize","useCallback","entries","process","env","NODE_ENV","length","console","error","join","entry","borderBoxSize","inlineSize","target","isHTMLElement","nextReflowing","current","scrollWidth","ref","el","defaultView","disconnect","win","resizeObserver","ResizeObserver","observe","box","useEffect","reflowing"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAIgBA;;;eAAAA;;;;iEAJO;qCACyB;gCAClB;AAEvB,SAASA,oBAAoBC,UAAmB,KAAK;IAC1D,MAAM,EAAEC,cAAc,EAAE,GAAGC,IAAAA,uCAAAA;IAC3B,MAAMC,cAAcC,OAAMC,UAAU,CAAC,IAAO,CAAA,CAAC,CAAA,GAAI,CAAC,EAAE,CAAC,EAAE;IACvD,MAAMC,eAAeF,OAAMG,MAAM,CAAC;IAClC,8FAA8F;IAC9F,iDAAiD;IACjD,MAAMC,oBAAoBJ,OAAMG,MAAM,CAAwB;IAC9D,MAAME,oBAAoBL,OAAMG,MAAM,CAAC,CAAC;IAExC,MAAMG,eAAuCN,OAAMO,WAAW,CAC5DC,CAAAA;QACE,uFAAuF;QACvF,wEAAwE;QACxE,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,gBAAgBH,QAAQI,MAAM,GAAG,GAAG;YAC/D,sCAAsC;YACtCC,QAAQC,KAAK,CACX;gBACE;gBACA;gBACA;aACD,CAACC,IAAI,CAAC;QAEX;QAEA,MAAMC,QAAQR,OAAO,CAAC,EAAE;QACxB,MAAMS,gBAAgBD,UAAAA,QAAAA,UAAAA,KAAAA,IAAAA,KAAAA,IAAAA,MAAOC,aAAa,CAAC,EAAE;QAC7C,IAAI,CAACA,iBAAiB,CAACD,OAAO;YAC5B;QACF;QAEA,MAAM,EAAEE,UAAU,EAAE,GAAGD;QACvB,MAAM,EAAEE,MAAM,EAAE,GAAGH;QAEnB,IAAI,CAACI,IAAAA,6BAAAA,EAAcD,SAAS;YAC1B;QACF;QAEA,IAAIE;QAEJ,uEAAuE;QACvE,yEAAyE;QACzE,iHAAiH;QACjH,IAAInB,aAAaoB,OAAO,EAAE;YACxB,IAAIjB,kBAAkBiB,OAAO,GAAGJ,YAAY;gBAC1CG,gBAAgB;YAClB;QACF,OAAO;YACL,MAAME,cAAcJ,OAAOI,WAAW;YACtC,IAAIL,aAAaK,aAAa;gBAC5BF,gBAAgB;YAClB;QACF;QAEAhB,kBAAkBiB,OAAO,GAAGJ;QAC5B,IAAI,OAAOG,kBAAkB,eAAenB,aAAaoB,OAAO,KAAKD,eAAe;YAClFnB,aAAaoB,OAAO,GAAGD;YACvBtB;QACF;IACF,GACA;QAACA;KAAY;IAGf,MAAMyB,MAAMxB,OAAMO,WAAW,CAC3B,CAACkB;YAKCrB;QAJA,IAAI,CAACR,WAAW,CAAC6B,MAAM,CAAC5B,CAAAA,mBAAAA,QAAAA,mBAAAA,KAAAA,IAAAA,KAAAA,IAAAA,eAAgB6B,WAAW,AAAXA,GAAa;YACnD;QACF;QAEAtB,CAAAA,6BAAAA,kBAAkBkB,OAAO,AAAPA,MAAO,QAAzBlB,+BAAAA,KAAAA,IAAAA,KAAAA,IAAAA,2BAA2BuB,UAAU;QAErC,MAAMC,MAAM/B,eAAe6B,WAAW;QACtC,MAAMG,iBAAiB,IAAID,IAAIE,cAAc,CAACxB;QAC9CF,kBAAkBkB,OAAO,GAAGO;QAC5BA,eAAeE,OAAO,CAACN,IAAI;YAAEO,KAAK;QAAa;IACjD,GACA;QAACnC;QAAgBS;QAAcV;KAAQ;IAGzCI,OAAMiC,SAAS,CAAC;QACd,OAAO;gBACL7B;YAAAA,CAAAA,6BAAAA,kBAAkBkB,OAAO,AAAPA,MAAO,QAAzBlB,+BAAAA,KAAAA,IAAAA,KAAAA,IAAAA,2BAA2BuB,UAAU;QACvC;IACF,GAAG,EAAE;IAEL,OAAO;QAAEH;QAAKU,WAAWhC,aAAaoB,OAAO;IAAC;AAChD"}