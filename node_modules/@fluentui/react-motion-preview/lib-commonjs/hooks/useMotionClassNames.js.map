{"version":3,"sources":["useMotionClassNames.ts"],"sourcesContent":["import * as React from 'react';\nimport { mergeClasses } from '@griffel/react';\n\nimport { MotionState, MotionType } from './useMotion';\nimport { useReducedMotionStyles } from '../styles/useReducedMotionStyles.styles';\n\nexport type MotionStylesKeys = 'default' | 'enter' | 'exit' | MotionType;\nexport type MotionClassNames = {\n  [key in MotionStylesKeys]?: string;\n};\n\nfunction assertMotionStyles(styles: MotionClassNames): asserts styles is MotionClassNames {\n  /**\n   * This verification is not necessary in production\n   * as we're verifying static properties that will not change between environments\n   */\n  if (process.env.NODE_ENV !== 'production') {\n    Object.keys(styles).forEach(key => {\n      const allowedTypes = [\n        'default',\n        'enter',\n        'exit',\n        'entering',\n        'entered',\n        'idle',\n        'exiting',\n        'exited',\n        'unmounted',\n      ];\n\n      /* This means the style provided has a prop that is not allowed as a motion style */\n      if (!allowedTypes.includes(key)) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          [\n            `@fluentui/react-motion-preview [${assertMotionStyles.name}]:`,\n            `The property \"${key}\" is not a valid motion style key!`,\n            `The valid keys are: \"${allowedTypes.join(', ')}\".`,\n            'Be sure to create motion styles properly.',\n          ].join('\\n'),\n        );\n      }\n    });\n  }\n}\n\nexport const useMotionClassNames = (motion: MotionState, motionStyles: MotionClassNames) => {\n  const { reduced: reducedMotionStyles } = useReducedMotionStyles();\n\n  const motionClassNames = React.useMemo(() => {\n    if (!motionStyles.enter && !motionStyles.exit) {\n      return '';\n    }\n\n    if (motion.active || motion.type === 'idle') {\n      return motionStyles.enter;\n    }\n\n    if (!motion.active) {\n      return motionStyles.exit;\n    }\n\n    return '';\n  }, [motion.active, motion.type, motionStyles.enter, motionStyles.exit]);\n\n  React.useEffect(() => assertMotionStyles(motionStyles), [motionStyles]);\n\n  return mergeClasses(motionStyles.default, motionClassNames, motionStyles[motion.type], reducedMotionStyles);\n};\n"],"names":["useMotionClassNames","assertMotionStyles","styles","process","env","NODE_ENV","Object","keys","forEach","key","allowedTypes","includes","console","warn","name","join","motion","motionStyles","reduced","reducedMotionStyles","useReducedMotionStyles","motionClassNames","React","useMemo","enter","exit","active","type","useEffect","mergeClasses","default"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA8CaA;;;eAAAA;;;;iEA9CU;wBACM;8CAGU;AAOvC,SAASC,mBAAmBC,MAAwB;IAClD;;;GAGC,GACD,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;QACzCC,OAAOC,IAAI,CAACL,QAAQM,OAAO,CAACC,CAAAA;YAC1B,MAAMC,eAAe;gBACnB;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YAED,kFAAkF,GAClF,IAAI,CAACA,aAAaC,QAAQ,CAACF,MAAM;gBAC/B,sCAAsC;gBACtCG,QAAQC,IAAI,CACV;oBACE,CAAC,gCAAgC,EAAEZ,mBAAmBa,IAAI,CAAC,EAAE,CAAC;oBAC9D,CAAC,cAAc,EAAEL,IAAI,kCAAkC,CAAC;oBACxD,CAAC,qBAAqB,EAAEC,aAAaK,IAAI,CAAC,MAAM,EAAE,CAAC;oBACnD;iBACD,CAACA,IAAI,CAAC;YAEX;QACF;IACF;AACF;AAEO,MAAMf,sBAAsB,CAACgB,QAAqBC;IACvD,MAAM,EAAEC,SAASC,mBAAmB,EAAE,GAAGC,IAAAA,oDAAAA;IAEzC,MAAMC,mBAAmBC,OAAMC,OAAO,CAAC;QACrC,IAAI,CAACN,aAAaO,KAAK,IAAI,CAACP,aAAaQ,IAAI,EAAE;YAC7C,OAAO;QACT;QAEA,IAAIT,OAAOU,MAAM,IAAIV,OAAOW,IAAI,KAAK,QAAQ;YAC3C,OAAOV,aAAaO,KAAK;QAC3B;QAEA,IAAI,CAACR,OAAOU,MAAM,EAAE;YAClB,OAAOT,aAAaQ,IAAI;QAC1B;QAEA,OAAO;IACT,GAAG;QAACT,OAAOU,MAAM;QAAEV,OAAOW,IAAI;QAAEV,aAAaO,KAAK;QAAEP,aAAaQ,IAAI;KAAC;IAEtEH,OAAMM,SAAS,CAAC,IAAM3B,mBAAmBgB,eAAe;QAACA;KAAa;IAEtE,OAAOY,IAAAA,oBAAAA,EAAaZ,aAAaa,OAAO,EAAET,kBAAkBJ,YAAY,CAACD,OAAOW,IAAI,CAAC,EAAER;AACzF"}